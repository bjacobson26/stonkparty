{"version":3,"sources":["components/Stock.js","constants.js","containers/StockContainer.js","actions.js","components/StockList.js","containers/VisibleStocks.js","containers/addStock.js","components/Feed.js","containers/LiveFeed.js","components/App.js","reducers.js","index.js"],"names":["moment","require","StyledStock","styled","div","StyledLink","a","RedDay","p","GreenDay","StockQuote","stockQuote","price","shortName","format","className","regularMarketPrice","regularMarketChangePercent","toFixed","percentChange","regularMarketDayHigh","regularMarketDayLow","Stock","props","state","lastRefreshAt","fetchData","bind","beginPolling","this","updateStockGraphData","stockTicker","updateStockQuote","updateWallStreetBetsData","setState","setTimeout","animationIn","animationOut","isVisible","quote","size","color","href","onClick","e","preventDefault","React","Component","STONKS_API_URL","process","StockContainer","connect","stocks","dispatch","fetch","then","response","json","graphData","stockGraphData","type","wsbData","wallStreetBetsData","StockList","onRemoveStockClick","map","stock","index","key","VisibleStocks","id","StyledInput","input","Label","AddStock","onSubmit","value","trim","placeholder","ref","node","Container","DisplayWsbPost","WsbPostAuthor","DisplayFeed","feed","post","name","author","body","unix","created_utc","WsbPost","Feed","updateWsbFeed","length","LiveFeed","feedData","console","log","Root","Watchlist","App","stonkpartyApp","combineReducers","newState","action","splice","store","createStore","render","document","getElementById"],"mappings":"qvBAMA,IAAMA,EAASC,EAAQ,IAGjBC,EAAcC,IAAOC,IAAV,KAWXC,EAAaF,IAAOG,EAAV,KAKVC,EAASJ,IAAOK,EAAV,KAINC,EAAWN,IAAOK,EAAV,KAcRE,EAAa,SAACC,GAAD,OAAiB,6BAClC,4BAAKA,EAAWC,MAAMC,WACtB,2BAAIb,IAASc,OAAO,4BACpB,2BAAOC,UAAU,cACf,4BACE,4CACA,wCACA,wCACA,wCAGF,4BACE,4BAAoB,MAAdJ,EAAqB,MAArB,WAAiCA,EAAWC,MAAMI,qBACxD,4BAAoB,MAAdL,EAAqB,MAvBX,SAACA,GAAD,OACpB,6BAEIA,EAAWC,MAAMK,4BAA8B,EAC/C,kBAACR,EAAD,MAA0D,IAA9CE,EAAWC,MAAMK,4BAAkCC,QAAQ,GAAvE,KACA,kBAACX,EAAD,MAAwD,IAA9CI,EAAWC,MAAMK,4BAAkCC,QAAQ,GAArE,MAkBmCC,CAAcR,IACjD,4BAAoB,MAAdA,EAAqB,MAArB,WAAiCA,EAAWC,MAAMQ,uBACxD,4BAAoB,MAAdT,EAAqB,MAArB,WAAiCA,EAAWC,MAAMS,0BAmE/CC,E,kDA7Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,cAAe,MAGjB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,gEAYjBE,KAAKH,c,kCAILG,KAAKN,MAAMO,qBAAqBD,KAAKN,MAAMQ,aAC3CF,KAAKN,MAAMS,iBAAiBH,KAAKN,MAAMQ,aACvCF,KAAKN,MAAMU,yBAAyBJ,KAAKN,MAAMQ,aAE/CF,KAAKK,SAAS,CAAET,cAAezB,MAC/B6B,KAAKD,iB,qCAILO,WAAWN,KAAKH,UAAW,O,+BAGnB,IAAD,OACP,OACE,6BACE,kBAAC,WAAD,CAAUU,YAAY,eAAeC,aAAa,UAAUC,WAAW,GACrE,kBAACpC,EAAD,KACE,4BAAK2B,KAAKN,MAAMQ,aAChB,6BACyB,OAArBF,KAAKN,MAAMgB,MAAiB,kBAAC,IAAD,CAAYC,KAAM,GAAIC,MAAO,UAAc/B,EAAWmB,KAAKN,MAAMgB,QAEjG,6BACA,6BACA,kBAAClC,EAAD,CACEqC,KAAK,GACLC,QAAS,SAAAC,GACPA,EAAEC,iBACF,EAAKtB,MAAMoB,YAJf,kB,GAxCQG,IAAMC,WC/DbC,EAAiBC,mHAAYD,gBAAkB,wBC0C/CE,EAAiBC,aAhCN,SAAA3B,GACtB,MAAO,CACL4B,OAAQ5B,EAAM4B,WAIS,SAAAC,GACzB,MAAO,CACLvB,qBAAsB,SAAAC,GACpBuB,MAAM,GAAD,OAAIN,EAAJ,uBAAiCjB,IACrCwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACLL,ECPD,SAA8BtB,EAAa4B,GAChD,MAAO,CAAEC,KAd4B,0BAcG7B,YAAaA,EAAa4B,eAAgBA,GDMnE7B,CAAqBC,EAAa2B,QAG/C1B,iBAAkB,SAAAD,GAChBuB,MAAM,GAAD,OAAIN,EAAJ,wBAAkCjB,IACtCwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAC5C,GACL0C,ECVD,SAA0BtB,EAAapB,GAC5C,MAAO,CAAEiD,KAjBuB,qBAiBG7B,YAAaA,EAAapB,WAAYA,GDS1DqB,CAAiBD,EAAapB,QAG3CsB,yBAA0B,SAAAF,GACxBuB,MAAM,GAAD,OAAIN,EAAJ,gBAA0BjB,IAC9BwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACM,GACLR,ECbD,SAAkCtB,EAAa+B,GACpD,MAAO,CAAEF,KApBiC,+BAoBG7B,YAAaA,EAAa+B,mBAAoBA,GDY5E7B,CAAyBF,EAAa8B,WAMzBV,CAA6C7B,GEnB5DyC,EAnBG,SAAC,GAAoC,IAAlCX,EAAiC,EAAjCA,OAAQY,EAAyB,EAAzBA,mBAC3B,OACE,4BACGZ,EAAOa,KAAI,SAACC,EAAOC,GAAR,OACV,kBAACjB,EAAD,eAAgBkB,IAAKD,GAAWD,EAAhC,CAAuCvB,QAAS,kBAAMqB,EAAmBG,YCiBlEE,EAFOlB,aAdE,SAAA3B,GACtB,MAAO,CACL4B,OAAyB5B,EAAM4B,WAIR,SAAAC,GACzB,MAAO,CACLW,mBAAoB,SAAAM,GAClBjB,EFNG,CAAEO,KAXiB,eAWGO,MEMJG,QAKLnB,CAA6CY,G,yUClBnE,IAAIQ,EAAcpE,IAAOqE,MAAV,KAWXC,EAAQtE,IAAOK,EAAV,KAILkE,EAAW,YAAmB,IAC5BF,EADYnB,EAAe,EAAfA,SAGhB,OACE,6BACE,kBAACoB,EAAD,6BACA,0BACEE,SAAW,SAAA/B,IACTA,EAAEC,iBACE2B,EAAMI,MAAMC,UAGhBxB,EHxBD,CAAEO,KARc,YAQG7B,YGwBAyC,EAAMI,QACxBJ,EAAMI,MAAQ,MAGf,kBAACL,EAAD,CACGO,YAAa,OACbC,IAAM,SAAAC,GACJR,EAAQQ,QASPN,EADfA,EAAWvB,cAAUuB,G,qZC1CrB,IAAM1E,EAASC,EAAQ,IAEjBgF,EAAY9E,IAAOC,IAAV,KAOT8E,EAAiB/E,IAAOC,IAAV,KAOd+E,EAAgBhF,IAAOK,EAAV,KAYb4E,EAAc,SAACC,GAAD,OAClB,6BACGA,EAAKpB,KAAI,SAACqB,EAAMnB,GAAP,OACN,kBAAC,WAAD,CAAU/B,YAAa,SAAUgC,IAAKkB,EAAKC,MAXnC,SAACD,EAAMlB,GAAP,OACd,kBAACc,EAAD,CAAgBd,IAAKA,GACnB,kBAACe,EAAD,KAAgBG,EAAKE,OAArB,YACA,2BAAIF,EAAKG,MACT,+BAAQzF,EAAO0F,KAAKJ,EAAKK,aAAa7E,OAAO,2BAA7C,0BAQO8E,CAAQN,EAAMA,EAAKC,YAuCfM,E,kDAhCb,WAAYtE,GAAQ,IAAD,8BACjB,cAAMA,IAEDG,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,gEAQjBE,KAAKH,c,kCAILG,KAAKN,MAAMuE,gBACXjE,KAAKD,iB,qCAILO,WAAWN,KAAKH,UAAW,Q,+BAGnB,IAAD,EACP,OACE,kBAAC,WAAD,CAAUU,YAAY,gBAAgBC,aAAa,UAAUC,WAAW,GACtE,kBAAC2C,EAAD,KACE,qCACC,UAAApD,KAAKN,MAAM8D,YAAX,eAAiBU,SAAU,EAAIX,EAAYvD,KAAKN,MAAM8D,MAAQ,kBAAC,IAAD,CAAY7C,KAAM,GAAIC,MAAO,gB,GA1BnFK,IAAMC,W,iBCZViD,EAFE7C,aAlBO,SAAA3B,GACtB,MAAO,CACL6D,KAAqB7D,EAAM6D,SAIJ,SAAAhC,GACzB,MAAO,CACLyC,cAAe,WACbxC,IAAM,GAAD,OAAIN,EAAJ,aACFO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAC0C,GACL5C,ELIH,SAAuB4C,GAE5B,OADAC,QAAQC,IAvBqB,kBAuBAF,GACtB,CAAErC,KAxBoB,kBAwBGyB,KAAMY,GKNrBH,CAAcG,WAMhB9C,CAA6C0C,G,2TCvB9D,IAAMO,GAAOjG,IAAOC,IAAV,KAOJiG,GAAYlG,IAAOC,IAAV,KAITyF,GAAO1F,IAAOC,IAAV,KAkBKkG,GAdH,WACV,OACE,kBAACF,GAAD,KACE,kBAACC,GAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,GAAD,KACE,kBAAC,EAAD,S,SCkDD,IAAME,GAAgBC,YAAgB,CAC3CpD,OArEF,WAAqC,IAC/BqD,EADUjF,EAAoB,uDAAZ,GAAIkF,EAAQ,uCAGlC,OAAOA,EAAO9C,MACZ,IPfqB,YOgBnB,MAAM,GAAN,oBACKpC,GADL,CAEE,CACEO,YAAa2E,EAAO3E,YACpB2B,UAAW,KACXnB,MAAO,KACPuB,mBAAoB,QAG1B,IPxBwB,eO2BtB,OAFA2C,EAAQ,aAAOjF,IACNmF,OAAOD,EAAOvC,MAAO,GACvBsC,EACT,IP3BmC,0BOqCjC,OATAA,EAAQ,aAAOjF,IACNyC,KAAI,SAACC,EAAOC,GAKnB,OAJGD,EAAMnC,cAAgB2E,EAAO3E,cAC9BmC,EAAMR,UAAYgD,EAAO/C,gBAGpBO,KAGFuC,EACT,IPrC8B,qBOgD5B,OAVAP,QAAQC,IAAI,yBACZM,EAAQ,aAAOjF,IACNyC,KAAI,SAACC,EAAOC,GAKnB,OAJGD,EAAMnC,cAAgB2E,EAAO3E,cAC9BmC,EAAM3B,MAAQmE,EAAO/F,YAGhBuD,KAGFuC,EACT,IPhDwC,+BO2DtC,OAVAP,QAAQC,IAAI,oBAAqBO,IACjCD,EAAQ,aAAOjF,IACNyC,KAAI,SAACC,EAAOC,GAKnB,OAJGD,EAAMnC,cAAgB2E,EAAO3E,cAC9BmC,EAAMJ,mBAAqB4C,EAAO5C,oBAG7BI,KAGFuC,EACT,QACE,OAAOjF,IAgBX6D,KAZF,WAAmC,IAArB7D,EAAoB,uDAAZ,GAAIkF,EAAQ,uCAChC,OAAOA,EAAO9C,MACZ,IPlE2B,kBOoEzB,OADAsC,QAAQC,IAAIO,GACLA,EAAOrB,KAChB,QACE,OAAO7D,MCpEPoF,GAAQC,YAAYN,IAE1BO,iBACE,kBAAC,IAAD,CAAUF,MAAOA,IACf,kBAAC,GAAD,OAEFG,SAASC,eAAe,U","file":"static/js/main.4756e81f.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport { Animated } from \"react-animated-css\";\n\nconst moment = require('moment')\n\n\nconst StyledStock = styled.div`\n  text-align: left;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 1px solid grey;\n  padding: 20px;\n  border-radius: 4px;\n  opacity: 1;\n  width: 80%;\n`;\n\nconst StyledLink = styled.a`\n  font-size: 20px;\n  margin-top: 20px;\n`\n\nconst RedDay = styled.p`\n  color: red;\n`\n\nconst GreenDay = styled.p`\n  color: green\n`\n\nconst percentChange = (stockQuote) => (\n  <div>\n    {\n      stockQuote.price.regularMarketChangePercent >= 0 ? \n      <GreenDay>{(stockQuote.price.regularMarketChangePercent * 100).toFixed(2)}%</GreenDay> : \n      <RedDay>{(stockQuote.price.regularMarketChangePercent * 100).toFixed(2)}%</RedDay>\n    }\n  </div>\n)\n\nconst StockQuote = (stockQuote) => (<div>\n  <h2>{stockQuote.price.shortName}</h2>\n  <p>{moment().format(\"MMMM Do YYYY, h:mm:ss a\")}</p>\n  <table className=\"pure-table\">\n    <tr>\n      <th>Market Price</th>\n      <th>% Change</th>\n      <th>Day High</th>\n      <th>Day Low</th>\n    </tr>\n\n    <tr>\n      <td>{ stockQuote == null ? '...' : `$${stockQuote.price.regularMarketPrice}` }</td>\n      <td>{ stockQuote == null ? '...' : percentChange(stockQuote) }</td>\n      <td>{ stockQuote == null ? '...' : `$${stockQuote.price.regularMarketDayHigh}` }</td>\n      <td>{ stockQuote == null ? '...' : `$${stockQuote.price.regularMarketDayLow}` }</td>\n    </tr>\n  </table>\n</div>)\n\nclass Stock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lastRefreshAt: null\n    }\n\n    this.fetchData = this.fetchData.bind(this)\n    this.beginPolling = this.beginPolling.bind(this)\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  fetchData() {\n    this.props.updateStockGraphData(this.props.stockTicker)\n    this.props.updateStockQuote(this.props.stockTicker)\n    this.props.updateWallStreetBetsData(this.props.stockTicker)\n    \n    this.setState({ lastRefreshAt: moment() })\n    this.beginPolling()\n  }\n\n  beginPolling() {\n    setTimeout(this.fetchData, 30000)\n  }\n  \n  render() {\n    return(\n      <div>\n        <Animated animationIn=\"bounceInLeft\" animationOut=\"fadeOut\" isVisible={true}>\n          <StyledStock>\n            <h1>{this.props.stockTicker}</h1>\n            <div>\n              { this.props.quote === null ? <BeatLoader size={20} color={\"green\"} /> : StockQuote(this.props.quote) }\n            </div>\n            <br></br>\n            <div>\n            <StyledLink \n              href=\"\"\n              onClick={e => {\n                e.preventDefault()\n                this.props.onClick()\n              }}\n            >\n                Remove\n            </StyledLink>\n          </div>\n          </StyledStock>\n        </Animated>\n      </div>\n    )\n  }\n}\n\nStock.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  stockTicker: PropTypes.string.isRequired\n}\n\nexport default Stock","export const STONKS_API_URL = process.env.STONKS_API_URL || 'http://localhost:5000'","import { connect } from 'react-redux'\nimport Stock from '../components/Stock'\nimport { \n  updateStockGraphData, \n  updateStockQuote, \n  updateWallStreetBetsData \n} from '../actions'\n\nimport { STONKS_API_URL } from '../constants'\n\nconst mapStateToProps = state => {\n  return {\n    stocks: state.stocks\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateStockGraphData: stockTicker => {\n      fetch(`${STONKS_API_URL}/stock_data/${stockTicker}`)\n      .then(response => response.json())\n      .then((graphData) => {\n        dispatch(updateStockGraphData(stockTicker, graphData))\n      })\n    },\n    updateStockQuote: stockTicker => {\n      fetch(`${STONKS_API_URL}/stock_quote/${stockTicker}`)\n      .then(response => response.json())\n      .then((stockQuote) => {\n        dispatch(updateStockQuote(stockTicker, stockQuote))\n      })\n    },\n    updateWallStreetBetsData: stockTicker => {\n      fetch(`${STONKS_API_URL}/wsb/${stockTicker}`)\n      .then(response => response.json())\n      .then((wsbData) => {\n        dispatch(updateWallStreetBetsData(stockTicker, wsbData))\n      })\n    }\n  }\n}\n\nexport const StockContainer = connect(mapStateToProps, mapDispatchToProps)(Stock)\n\n","export const ADD_STOCK = 'ADD_STONK'\nexport const REMOVE_STOCK = 'REMOVE_STONK'\nexport const UPDATE_STOCK_GRAPH_DATA = 'UPDATE_STOCK_GRAPH_DATA'\nexport const UPDATE_STOCK_QUOTE = 'UPDATE_STOCK_QUOTE'\nexport const UPDATE_WALL_STREET_BETS_DATA = 'UPDATE_WALL_STREET_BETS_DATA'\nexport const UPDATE_WSB_FEED = 'UPDATE_WSB_FEED'\n\nexport function addStock(stockTicker) {\n  return { type: ADD_STOCK, stockTicker }\n}\n\nexport function removeStock(index) {\n  return { type: REMOVE_STOCK, index }\n}\n\nexport function updateStockGraphData(stockTicker, stockGraphData) {\n  return { type: UPDATE_STOCK_GRAPH_DATA, stockTicker: stockTicker, stockGraphData: stockGraphData }\n}\n\nexport function updateStockQuote(stockTicker, stockQuote) {\n  return { type: UPDATE_STOCK_QUOTE, stockTicker: stockTicker, stockQuote: stockQuote }\n}\n\nexport function updateWallStreetBetsData(stockTicker, wallStreetBetsData) {\n  return { type: UPDATE_WALL_STREET_BETS_DATA, stockTicker: stockTicker, wallStreetBetsData: wallStreetBetsData }\n}\n\nexport function updateWsbFeed(feedData) {\n  console.log(UPDATE_WSB_FEED, feedData)\n  return { type: UPDATE_WSB_FEED, feed: feedData }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StockContainer } from '../containers/StockContainer'\n\nconst StockList = ({ stocks, onRemoveStockClick }) => {\n  return(\n    <ul>\n      {stocks.map((stock, index) => (\n        <StockContainer key={index} {...stock} onClick={() => onRemoveStockClick(index)} />\n      ))}\n    </ul>\n  )\n}\n\nStockList.propTypes = {\n  stocks: PropTypes.arrayOf(\n    PropTypes.shape({\n      stockTicker: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  onRemoveStockClick: PropTypes.func.isRequired\n}\n\nexport default StockList","import { connect } from 'react-redux'\nimport { removeStock } from '../actions'\nimport StockList from '../components/StockList'\n\nconst getVisibleStocks = (stocks) => {\n  // could eventually add filters here\n  return stocks\n}\n\nconst mapStateToProps = state => {\n  return {\n    stocks: getVisibleStocks(state.stocks)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRemoveStockClick: id => {\n      dispatch(removeStock(id))\n    }\n  }\n}\n\nconst VisibleStocks = connect(mapStateToProps, mapDispatchToProps)(StockList)\n\nexport default VisibleStocks","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addStock } from '../actions'\nimport styled from 'styled-components'\n\nlet StyledInput = styled.input`\n  font-size: 50px;\n  border: none;\n  border-bottom: 1px solid grey;\n  text-align: center;\n  opacity: 0.9;\n  display: block;\n  margin: auto;\n  width: 250px;\n`\n\nlet Label = styled.p`\n  text-align: center;\n`\n\nlet AddStock = ({ dispatch }) => {\n  let input\n\n  return (\n    <div>\n      <Label>ENTER A STOCK SYMBOL</Label>\n      <form\n        onSubmit={ e => {\n          e.preventDefault()\n          if(!input.value.trim()) {\n            return\n          }\n          dispatch(addStock(input.value))\n          input.value = ''\n        }}\n       >\n         <StyledInput\n            placeholder={'TSLA'}\n            ref={ node => {\n              input = node\n            }}\n          />\n       </form>\n    </div>\n  )\n}\n\nAddStock = connect()(AddStock)\nexport default AddStock","import React from 'react'\nimport styled from 'styled-components'\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport { Animated } from \"react-animated-css\";\n\nconst moment = require('moment')\n\nconst Container = styled.div`\n  padding: 20px;\n  height: 800px;\n  overflow: scroll;\n  border-radius: 3px;\n`\n\nconst DisplayWsbPost = styled.div`\n  border-bottom: 1px solid black;\n  padding: 5px;\n  margin: 10px;\n  font-size: 10pt;\n`\n\nconst WsbPostAuthor = styled.p`\n  font-style: italic;\n`\n\nconst WsbPost = (post, key) => (\n  <DisplayWsbPost key={key} >\n    <WsbPostAuthor>{post.author} said...</WsbPostAuthor>\n    <p>{post.body}</p>\n    <small>{moment.unix(post.created_utc).format(\"MMMM Do YYYY, h:mm:ss a\")} on /r/wallstreetbets</small>\n  </DisplayWsbPost>\n)\n\nconst DisplayFeed = (feed) => (\n  <div>\n    {feed.map((post, index) => (\n        <Animated animationIn={\"zoomIn\"} key={post.name}>\n          {WsbPost(post, post.name)}\n        </Animated>\n    ))}\n  </div>\n);\n\nclass Feed extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.fetchData = this.fetchData.bind(this)\n    this.beginPolling = this.beginPolling.bind(this)\n  }\n\n  componentDidMount() {\n    this.fetchData()\n  }\n\n  fetchData() {\n    this.props.updateWsbFeed()\n    this.beginPolling()\n  }\n\n  beginPolling() {\n    setTimeout(this.fetchData, 15000)\n  }\n\n  render() {\n    return(\n      <Animated animationIn=\"bounceInRight\" animationOut=\"fadeOut\" isVisible={true}>\n        <Container>\n          <h1>Feed</h1>\n          {this.props.feed?.length >= 1 ? DisplayFeed(this.props.feed) : <BeatLoader size={20} color={\"green\"} />}\n        </Container>\n      </Animated>\n    )\n  }\n}\n\nexport default Feed","import { connect } from 'react-redux'\nimport Feed from '../components/Feed'\nimport { updateWsbFeed } from '../actions'\nimport fetch from 'node-fetch'\nimport { STONKS_API_URL } from '../constants'\n\nconst getVisibleFeed = (feed) => {\n  // could eventually add filters here\n  return feed\n}\n\nconst mapStateToProps = state => {\n  return {\n    feed: getVisibleFeed(state.feed)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateWsbFeed: () => {\n      fetch(`${STONKS_API_URL}/wsbFeed`)\n        .then(response => response.json())\n        .then((feedData) => {\n          dispatch(updateWsbFeed(feedData))\n        })\n    }\n  }\n}\n\nconst LiveFeed = connect(mapStateToProps, mapDispatchToProps)(Feed)\n\nexport default LiveFeed","import React from 'react'\nimport VisibleStocks from '../containers/VisibleStocks'\nimport AddStock from '../containers/addStock'\nimport styled from 'styled-components'\nimport LiveFeed from '../containers/LiveFeed'\n\nconst Root = styled.div`\n  opacity: 0.9;\n  height: 1000px;\n  padding: 20px;\n  display: flex;\n`\n\nconst Watchlist = styled.div`\n  width: 50%;\n`\n\nconst Feed = styled.div`\n  width: 50%;\n`\n\nconst App = () => {\n  return(\n    <Root>\n      <Watchlist>\n        <AddStock />\n        <VisibleStocks />\n      </Watchlist>\n      <Feed>\n        <LiveFeed />\n      </Feed>\n    </Root>\n  )\n}\n\nexport default App","import { combineReducers } from 'redux'\n\nimport {\n  ADD_STOCK,\n  REMOVE_STOCK,\n  UPDATE_STOCK_GRAPH_DATA,\n  UPDATE_STOCK_QUOTE,\n  UPDATE_WALL_STREET_BETS_DATA,\n  UPDATE_WSB_FEED\n} from './actions'\n\nfunction stocks(state = [], action) {\n  let newState\n\n  switch(action.type) {\n    case ADD_STOCK:\n      return [\n        ...state,\n        {\n          stockTicker: action.stockTicker,\n          graphData: null,\n          quote: null,\n          wallStreetBetsData: null\n        }\n      ]\n    case REMOVE_STOCK:\n      newState = [...state]\n      newState.splice(action.index, 1)\n      return newState\n    case UPDATE_STOCK_GRAPH_DATA:\n      newState = [...state]\n      newState.map((stock, index) => {\n        if(stock.stockTicker === action.stockTicker) {\n          stock.graphData = action.stockGraphData\n        }\n\n        return stock\n      })\n\n      return newState\n    case UPDATE_STOCK_QUOTE:\n      console.log('updating stock quote')\n      newState = [...state]\n      newState.map((stock, index) => {\n        if(stock.stockTicker === action.stockTicker) {\n          stock.quote = action.stockQuote\n        }\n\n        return stock\n      })\n\n      return newState\n    case UPDATE_WALL_STREET_BETS_DATA:\n      console.log('updating wsb data', action)\n      newState = [...state]\n      newState.map((stock, index) => {\n        if(stock.stockTicker === action.stockTicker) {\n          stock.wallStreetBetsData = action.wallStreetBetsData\n        }\n\n        return stock\n      })\n\n      return newState\n    default:\n      return state\n  }\n}\n\nfunction feed(state = [], action) {\n  switch(action.type) {\n    case UPDATE_WSB_FEED:\n      console.log(action)\n      return action.feed\n    default:\n      return state\n  }\n}\n\nexport const stonkpartyApp = combineReducers({\n  stocks,\n  feed\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport App from './components/App'\nimport { stonkpartyApp } from './reducers'\n\nconst store = createStore(stonkpartyApp)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}